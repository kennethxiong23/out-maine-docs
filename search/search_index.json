{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":"<p>Welcome to Olin's PInT Out Maine subteam's official/unnoficial documentation site! Here you'll be able to find documentation specifc to our subteam(i.e how we mantain our github repository). If you're ever lost about a certain script or how to reinstall an application, come here!</p> <p>Note: This is maintained by Kenneth Xiong '27. There are some things that are missing because I forgot about them, or I don't understand how they work. If there's an error or something missing, feel free to reach out.</p>"},{"location":"#installing-unity","title":"Installing Unity","text":"<p>We use version 2020.3.32f1 of Unity. Any other version will not be able to open the project.</p> <ol> <li> <p>Go to https://unity.com/releases/editor/archive and download version 2020.3.32f1 of Unity for you os(runder 2020.x tab). DO NOT OPEN THE FILE YET!</p> </li> <li> <p>Download Unity Hub.</p> </li> <li> <p>Open Unity Hub FIRST. Follow the prompts to create a new account. </p> </li> </ol>"},{"location":"#installing-github","title":"Installing Github","text":"<p>You might be thinking \"I'm not a programmer, I don't need this,\" get it :3</p> <ol> <li>Download Git for your os here.</li> <li>Run the file with default settings. Make sure that git is added to your computer's PATH.</li> <li> <p>Download Github Desktop here.</p> <p>This step is not optional for advanced users. Unity is not command line friendly when it comes merging branches.</p> </li> <li> <p>Run the installation file and log in.</p> <p>If you haven't already now is a good time to create a github account.</p> </li> <li> <p>Select \"Clone a Repository from the Internet\".  Paste \"https://github.com/kennethxiong23/outmaine\" into the space for a web adress. Make note of file path that the repository has been copied to. You will need it in the next step.</p> <p>If this throws an error, reach out to Kenneth. You don't have access to the repository(oops!). </p> </li> <li> <p>Open Unity Hub. Click \"Add Project\" and select \"From Disk\". Nagivate to where you cloned repository earlier. If everything was setup correctly, the project should open in Unity. YAY!!!!</p> </li> </ol>"},{"location":"#installing-photoshop","title":"Installing Photoshop","text":"<p>Different from past semesters, we will be using photoshop to create our pixel art. Fun Fact! Olin gives all students access to the entire Adobe suite.</p> <ol> <li>Self explanatory. Download Adobe Creative Cloud(if you haven't already). Install Photoshop.</li> </ol> <p>That's it! You're now ready to start designing :)</p>"},{"location":"github/","title":"Github","text":"<p>This part is basically just the onboarding!</p>"},{"location":"github/#installing-github","title":"Installing Github","text":"<p>You might be thinking \"I'm not a programmer, I don't need this,\" get it :3</p> <ol> <li>Download Git for your os here.</li> <li>Run the file with default settings. Make sure that git is added to your computer's PATH.</li> <li> <p>Download Github Desktop here.</p> <p>This step is not optional for advanced users. Unity is not command line friendly when it comes merging branches.</p> </li> <li> <p>Run the installation file and log in.</p> <p>If you haven't already now is a good time to create a github account.</p> </li> <li> <p>Select \"Clone a Repository from the Internet\".  Paste \"https://github.com/lilibaker/outmaine.git\" into the space for a web adress. Make note of file path that the repository has been copied to. You will need it in the next step.</p> <p>If this throws an error, reach out to Kenneth. You don't have access to the repository(oops!). </p> </li> <li> <p>Open Unity Hub. Click \"Add Project\" and select \"From Disk\". Nagivate to where you cloned repository earlier. If everything was setup correctly, the project should open in Unity. YAY!!!!</p> </li> </ol>"},{"location":"github/#commiting-and-pushing-changes","title":"Commiting and Pushing Changes","text":"<ol> <li> <p>Go  to GitHub Desktop.</p> </li> <li> <p>At the bottom left, there's a text box that says \"summary(required).\" This is a commit message. This goes alongside your files that are uploaded to Github. This is how developers keep track of what changes have been made. It's important to leave a quick helpful message such as \"Finished onboarding scene\" or \"added background\". Write a quick message and click commit.</p> </li> <li> <p>Click the box next to \"Current Branch.\" For new branches it will say \"Publish this branch,\" while for old ones it will say \"Push origin\".</p> </li> </ol>"},{"location":"github/#creating-a-new-branch","title":"Creating a New Branch","text":"<ol> <li>Select the \"Current Branch\" drop down again.</li> <li>Click \"New Branch\" to the right of the search bar.</li> <li>Name the branch. </li> <li>Under \"Create branch based on...\" make sure your new branch is highlighted and not \"main.\"</li> </ol> <p>If all goes well, it should say the name of your branch under \"Current Branch.\"</p>"},{"location":"github/#switching-branches","title":"Switching Branches","text":"<ol> <li>Open the repository in Github Desktop. If you just did the setup, you should already be there.</li> <li>At the top of the window there should be three boxes of text all in a line: \"Current Repository,\" \"Current Branch,\" and \"Fetch Origin\". Click on \"Current Branch.\"</li> <li>Select the your branch. If it doesn't show up, search for it in the search bar. </li> </ol> <p>If upon switch branches, you receive a popup for resolving changes select \"Leave changes on main.\"</p> <p>If you get an \"Overwrite Stash\" prompt select \"overwrite\"</p>"},{"location":"github/#merging-branches","title":"Merging Branches","text":"<p>Merging branches to be pulled into main is a massive headache. For now, the steps are try to merge the branch. If it fails, talk to Kenny, we'll work on it together.</p> <ol> <li> <p>To merge your branch onto a another one, commit and push your changes and switch to the branch you want to merge into.</p> </li> <li> <p>Go to Branch &gt; Merge Into Current Branch and select the branch you were working on.</p> </li> <li> <p>Create a merge commit.</p> </li> </ol> <p>That should just work, if it doesn't.... STOP!</p> <p>We'll look at it together!</p>"},{"location":"onboarding/","title":"Onboarding","text":"<p>Welcome to onboarding! Here you'll learn how to create a new branch in Github, create a new scene, and then publish the scene to Github. Those who want to focus more on the game design side will learn how to create and import their own assets. While those who care more about game development will learn how to add basic functionality to the sprites in the scene. Overachievers will learn how to do both!</p> <p>We'll be doing the same onboarding during our early meetings this semester. This is for those who joined late, missed a meeting, or want to go ahead.</p>"},{"location":"onboarding/#switching-branches","title":"Switching Branches","text":"<p>Before we begin onboarding, we need to switch branches. To use a nerd analagy, think of branches as separate time lines. Each branch comes from a common origin(usually main), but diverges from one another. This allows programmers to each implement changes without at the same time without the risk of ruining each other's code.   </p> <p>I've created a new branch specifically for onboarding that has a blank version of our games for learning. Let's get there.</p> <ol> <li>Open the repository in Github Desktop. If you just did the setup, you should already be there.</li> <li>At the top of the window there should be three boxes of text all in a line: \"Current Repository,\" \"Current Branch,\" and \"Fetch Origin\". Click on \"Current Branch.\"</li> <li>Select the \"Onboarding\" branch. If it doesn't show up, search for it in the search bar. </li> </ol> <p>If upon switch branches, you receive a popup for resolving changes select \"Leave changes on main.\"</p> <p>If you get an \"Overwrite Stash\" prompt select \"overwrite\"</p>"},{"location":"onboarding/#creating-a-new-branch","title":"Creating a New Branch","text":"<p>Yay! You just switched branches!!!! But wait... The onboarding branch is a template that everyone needs to use, so it needs to stay the same. You need to create a new branch to create your scene in.</p> <ol> <li>Select the \"Current Branch\" drop down again.</li> <li>Click \"New Branch\" to the right of the search bar.</li> <li>Name the branch \"onboarding-name\" where name is your name.</li> <li>Under \"Create branch based on...\" make sure \"onboarding\" is highlieghted and not \"main.\"</li> </ol> <p>If all goes well, it should say the name of your branch under \"Current Branch.\"</p>"},{"location":"onboarding/#unity-editor-walkthrough","title":"Unity Editor Walkthrough","text":"<p>Now, let's create a scene! Actually before that, let does some learning</p> <ol> <li> <p>Open up the out maine project in Unity Hub</p> <p>Hopefully, your screen looks like this. If not, the extra windows can be added by going to Window&gt;General dropdown at the top of the Unity window. </p> </li> <li> <p>Before we go any further, let's do some explaining! </p> <ul> <li> <p>In the top middle there is a play/pause button. Clicking play will run the game from the given scene. Clicking it again will stop it. You can tell when the game is active when the play button is highlighted.</p> <p>Note: Changes made while the game is active DO NOT SAVE!</p> </li> <li> <p>The bottom left of your window is a preview of the scene.</p> </li> <li>Above that is the console, this will spit out any errors. Most of them can be ingored. </li> <li> <p>To the right this is the heirarchy window. This shows all the game objects(i.e elements) in the scene. The order they appear determines, their order in the scene. The game objects at the bottom will be the bottom layer while the top most will be the highest layer. Let's break down these game objects already there:</p> <ul> <li>EventSystem - Caputures keyboard inputs</li> <li>Canvas - UI Layer. Elements that you want to always exist on screen go here(think minecraft inventory).</li> <li>Grid - It  contains a Background object. This is what you should use to build your background.</li> <li>Main Camera - The \"thing\" that actually sees and records the scene.  </li> </ul> <p>All sprites(playable or interactable objects) should go between the Grid and Main Camera game objects.</p> <ul> <li>To the right of this is the Project tab. This just contains the project file strucutre. It's pretty self explanatory. Everything goes in assets under the correct folder. Scenes in scenes, artwork in artwork, etc. etc.</li> <li>Lastly is the inspector. When you click on a game object, this is how you view and edit its properties.</li> </ul> </li> </ul> </li> </ol>"},{"location":"onboarding/#creating-a-scene","title":"Creating a Scene","text":"<p>For this exercise, you will be making a basic background and adding two sprite using existing artwork.</p> <ol> <li> <p>Click on the \"Tile Map\" tab next to \"Console.\" This is where you store artwork to be used in the background/tile map.</p> </li> <li> <p>Click the drop down that says \"Create New Palette.\" Name it onboarding, store it in the assets folder for now. These will be stored in the prefab folder(which doesn't exist in this branch). We have one for every scene.</p> </li> <li> <p>Start dragging art from the artwork folder into the empty tilemap. Each file you drag will ask you to make a tile. These are what unity uses to create the background.</p> </li> <li> <p>When you have enough tiles, use the paint with active brush tool (B) to add them to the scene. Click on the \"scene\" tab next to \"game\" at the top of the bottom left window. Drag your mouse over the art element you want to add in the tile map. Then click to add it to the scene. Make sure you have the \"background game object selected. To see what the scene looks like. Switch back to the \"game\" tab or click on the \"Main Camera\" Object.</p> </li> </ol> <p>This step is super finicky. It just takes some practice to get used to.</p> <ol> <li>To create a sprite. Go to the \"Game Object,\" click \"Create Empty.\" Name it whatever, make sure it's between Main Camera and Grid in the heirarchy window. Then in the Inpsector click \"add component.\" Look up \"Sprite Renderer.\" Under the \"sprite\" option, click the circle with a dot in it and select an artwork to be the sprite.</li> <li>Do this again to make a second sprite.</li> </ol>"},{"location":"onboarding/#adding-movement","title":"Adding Movement","text":"<p>A lot of this functionality has been built out, so you're just adding things.</p> <ol> <li>Open up your sprite in the Inspector.</li> <li> <p>You're going to add three components.</p> <ul> <li>A script called \"player\"</li> <li>A Rigidbody 2D<ul> <li>Set gravity to 0</li> </ul> </li> <li>A Box Collider 2D</li> </ul> </li> <li> <p>Now, run the game. You should be able to use WASD to move around.</p> </li> </ol> <p>For now, your done! Congrats on making a scene!!!</p>"},{"location":"onboarding/#commiting-and-pushing-changes","title":"Commiting and Pushing Changes","text":"<p>Before you finish you need to save your changed to github.</p> <ol> <li> <p>Go back to GitHub Desktop.</p> </li> <li> <p>At the bottom left, there's a text box that says \"summary(required).\" This is a commit message. This goes alongside your files that are uploaded to Github. This is how developers keep track of what changes have been made. It's important to leave a quick helpful message such as \"Finished onboarding scene\" or \"added background\". Write a quick message and click commit.</p> </li> <li> <p>Click the box next to \"Current Branch.\" For new branches it will say \"Publish this branch,\" while for old ones it will say \"Push origin\".</p> </li> </ol> <p>That's it! Congrats. You just learned how to use Github and how to navigate Unity. There's still some left to learn, but it's all down hill from here.</p>"},{"location":"onboarding/design/","title":"Design Onboarding","text":"<p>Here you will learn how to create custom pixel art and import it into unity.</p> <p>For this part of onboarding, you'll be creating a custom backdrop for your scene.</p>"},{"location":"onboarding/design/#creating-custom-pixel-art","title":"Creating Custom Pixel Art","text":"<p>We will be using photoshop to create our pixel art. This is pretty self explanatory, but there are some things to keep in mind.</p> <ul> <li>Characters are 14x28 pixels</li> <li>Scenes are 128x96 pixels</li> <li>When making a new document make sure its units in pixels</li> <li>Use the pencil tool to draw artwork<ul> <li>Right click on the brush(B) and switch to the pencil</li> </ul> </li> <li>You don't need to create a new photoshop file for each art piece, you can create them in one file and separate them in unity(this is called a spite sheet).<ul> <li>If you're making a sprite sheet, make sure each new sprite is on a separate layer. It just makes it easier in the future to edit.</li> </ul> </li> <li>When you're done save the file as  .psd file and NOTHING ELSE. Unity can read .psd files and it makes it so much easier to edit after the fact.</li> </ul> <p>With that done, try and make a background to replace the blank background of your current scene.</p>"},{"location":"onboarding/design/#importing-assets","title":"Importing Assets","text":"<p>Now let's import the background you made.</p> <ol> <li>Drag and drop your .psd files into the artwork folder. You can also do this through the project manager.</li> </ol> <p>Bing! Bam! Boom! You're done! Not yet...</p> <ol> <li> <p>Select the artwork and view it in the inspector. Change \"Filter Mode\" from \"Bilinear\" to \"Point(No Filter).\" Change \"Compression\" to \"None.\" Both of these setting warp the appearance of the artwork. Switching them mantains its appearance.</p> </li> <li> <p>Select the \"Sprite Editor\" button. In the pop up that appears, at the bottom right, change \"Pivot\" to \"Bottom Left.\"</p> <p>All our assets are this way, so it just keeps things uniform.</p> </li> <li> <p>Ok! Now your artwork can be used. If you made a sprite sheet, there are a few more step.</p> </li> <li> <p>Change the \"Sprite Mode\" setting from \"Single\" to \"Multiple\". Guess what this does?</p> </li> <li> <p>Reopen the Sprite Editor. In the top left, click the \"Slice\" drop down. Change the pivot to \"Bottom Left.\" Click Slice.</p> <p>This will slice all the sprites for you. If you don't like automatic, change the type to grid, to specify how the sprites should be sliced.</p> </li> </ol> <p>Alright! You're done! You're now a fully fledged amateur game designer!!!</p>"},{"location":"onboarding/dev/","title":"Development Onboarding","text":"<p>Here you will learn how to add a working button to your scene. You'll also learn how to use collision as a trigger between your two sprites.</p> <p>The feature you'll be implementing is restricting the player's movement when it comes into contact with the other sprite. Then, you'll allow the player to move again by clicking a button.</p> <p>This \"flavor\" of onboarding will be more code heavy. Experience of any programming language is crucial(basically, have you taken SoftDes). I'll explain a little bit about coding with C#, but that's it. If you have no experience and still want to try to follow along, go ahead! If you need help, I'll gadly help in my free time.</p>"},{"location":"onboarding/dev/#c-intro","title":"C# Intro","text":"<p>But first! Let's learn some C#. Let's look at <code>FallingBook.cs</code> as an example. This script is supposed to trigger an animation and stop the player's movement upon impact.</p> <pre><code>using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class FallingBook : Collidable\n{\n    public player player; \n    bool firstHit; \n    Animator animator;\n\n    protected void Start(){\n        base.Start();\n        animator = GetComponent&lt;Animator&gt;(); \n        firstHit = true;\n    }\n    protected override void OnCollide(Collider2D coll)\n    {\n        if (firstHit == true){\n            animator.SetTrigger(\"hit\"); \n            player.moveFlag = false;\n            firstHit = false;\n        }\n\n    }\n</code></pre> <p>At this point, I'm too lazy to explain this code, but here are some important things to point out.</p> <ul> <li> <p>C# requires <code>{}</code> for classes, loops, and functions. It also nees <code>;</code> after each line. Despite this! It's still good practice to properly indent your lines within brackets for code readability. </p> <p>Please or I'll be sad :(.</p> </li> <li> <p><code>public class FallingBook : Collidable{}</code> creates the object(in this case a class) that unity can interact with. <code>Collidable</code>is the class that this one extends from(i.e is based on/can use function from)</p> <p>The <code>override</code> keyword means this class alters the base class' function. <code>base.start()</code> means that it copied the base class' function and adds to it.</p> </li> <li> <p>There are some built in functions <code>void Start(){}</code> and <code>void Update(){}</code>. </p> <ul> <li> <p><code>Start</code> runs once at the very beginning. This is used for setting inital variables, or getting game objects for later use. </p> </li> <li> <p><code>Update()</code> runs once every x frames(I think ten). Use it for things like that need constant updates like moving the charcter.</p> <p>This programs omits <code>Update()</code>. This is because it's already defined in the Collidable class.</p> </li> </ul> </li> <li> <p>You must declare variables before anything else.</p> </li> <li> <p><code>animator = GetComponent&lt;Animator&gt;();</code> is how you assign a component from the same game object to a variable.</p> <p>There a way to get values and components from other game objects. See documentation for bookFallFinish for a explanation.</p> </li> </ul> <p>That's basically it! Let's get coding.</p>"},{"location":"onboarding/dev/#adding-collision-detection","title":"Adding Collision Detection","text":"<p>Before we start, make sure to add a Box Collider 2D to your second sprite. </p> <ol> <li> <p>Create a new script in the stationary sprite(Add Component &gt; New Script). Name it \"StopMove\"</p> </li> <li> <p>Replace <code>MonoBehavior</code> with <code>Collidable</code>. We're going to leverage a prewritten class.</p> </li> <li> <p>First we need to declare our variables. </p> <pre><code>public player player;\n</code></pre> <p>This is actually getting the values from the player class in our movable sprite. The player class is setup so that all it's values are public. Don't do this unless necessary. Things can go very very wrong.</p> <p>Normally, we would also have to declare the box colliders, but the Collidable class does it for us.</p> </li> <li> <p>Remove <code>void Start()</code>. It's already defined for us in the Collider class.</p> </li> <li> <p>Get rid of <code>void Update()</code> replace it with </p> <pre><code>protected override void OnCollide(Collider2D coll)\n</code></pre> <p>The <code>protected</code> means it can only be accsessed within its class and children classes.</p> </li> <li> <p>Now just add </p> <pre><code>player.moveFlag = false;\n</code></pre> <p>This is a boolean created within the player class that controls movement.</p> </li> </ol> <p>Alrighty! Now just run the game and see if it works.</p>"},{"location":"onboarding/dev/#adding-a-button","title":"Adding a Button","text":"<p>This is pretty simple, and we're not gonna do anything fancy with it.</p> <ol> <li> <p>Create a button game object(Game Object &gt; UI &gt; Button). It should show up under the Canvas game object.</p> </li> <li> <p>Open the button in the Inspector. Scroll down to \"On Click().\" Click the \"+\".</p> </li> <li> <p>For the target (circle with a dot in it), click the \"scene\" tab and select the moveable sprite.</p> </li> <li> <p>Click the \"No Function\" drop down and click player&gt;changeMovement. Check the box.</p> <ul> <li>This is a function within player that activates/deactivates movement. If no value is given, it defaults to being true. To be able to control things with a button, a function is required. You can't just change variables at will.</li> </ul> </li> <li> <p>Run it and see if it works. Does it? Nope! Remeber <code>void Update()</code>. It's always running. Since the sprites are constantly colliding, <code>OnCollide()</code> is constantly stopping the movement.</p> </li> <li> <p>We can stop this two ways, either by making it run only the first time we collide, or by moving either sprite outside of the collision zone. Try to implement a solution to this. Have fun!</p> </li> </ol> <p>Well... That's it. If you've finished the last part, congrats! That's all of onboarding. It's goodbye for now, but feel free to reference this site whenever you have questions. Or even help me write and update it! Tata for now &lt;3</p>"},{"location":"scripts/","title":"Scripts","text":"<p>This section provides an overviews and explanations of all scripts used in Unity.</p> <p>This section is very work in progress(Kenny is done with writing documentation, if you have a question, just bother him).</p>"},{"location":"scripts/CameraMotor/","title":"CameraMotor","text":"<p>Extends <code>MonoBehaviour</code></p>"},{"location":"scripts/CameraMotor/#overview","title":"Overview","text":"<p>Allows the player to \"wiggle\" within the camera frame. </p> <p>I.e. lets the player move a left or right a little bit before moving the camers. Gives the sense of movement</p>"},{"location":"scripts/Collidable/","title":"Collidable","text":"<p>Extends <code>MonoBehavior</code></p>"},{"location":"scripts/Collidable/#overview","title":"Overview","text":"<p>Superclass that implements collision detection.</p>"},{"location":"scripts/Collidable/#functions","title":"Functions","text":"<p><code>protected virtual void OnCollide</code></p> <ul> <li>Meant to be used with <code>override</code> in extended classes.</li> <li>Put what you want to happen when a collision is detected.</li> </ul>"},{"location":"scripts/FallingBook/","title":"FallingBook","text":"<p>Extends <code>Collidable</code></p>"},{"location":"scripts/FallingBook/#overview","title":"Overview","text":"<p>Triggers upon collision with book shelf sprite in the inside scene.</p> <p>Causes sprite animation to begin playing.</p>"},{"location":"scripts/FallingBook/#functions","title":"Functions","text":"<p><code>protected override void OnCollide</code></p> <ul> <li>Triggers bookshelf animation upon first collision with sprite</li> </ul>"},{"location":"scripts/Fighter/","title":"Fighter","text":"<p>Extends <code>MonoBehavior</code></p>"},{"location":"scripts/Fighter/#overview","title":"Overview","text":"<p>Base class for our movable player</p>"},{"location":"scripts/InputDeviceManager/","title":"InputDeviceManager","text":""},{"location":"scripts/InstantiatePrefabs/","title":"InstantiatePrefabs","text":""},{"location":"scripts/Mover/","title":"Mover","text":"<p>Extends <code>Fighter</code></p>"},{"location":"scripts/Mover/#overview","title":"Overview","text":"<p>Base for our moveable player.</p> <p>Sets base movement speed and does all the input scaling.</p>"},{"location":"scripts/Mover/#functions","title":"Functions","text":"<p><code>protected virtual void UpdateMotor</code></p> <ul> <li>Takes a <code>Vector3</code> as input to transform the GameObject</li> </ul>"},{"location":"scripts/NavigateScenes/","title":"NavigateScenes","text":"<p>Extends <code>MonoBehaviour</code></p>"},{"location":"scripts/NavigateScenes/#overview","title":"Overview","text":"<p>Scene switcher</p>"},{"location":"scripts/NavigateScenes/#functions","title":"Functions","text":"<p><code>public void switchScene</code></p> <ul> <li>Recieves an <code>int</code> corresponder to the scene number(go to File&gt;Build Settings to see scene numbers)</li> <li>Switches to the corresponding scene.</li> </ul>"},{"location":"scripts/Player/","title":"player","text":"<p>Extends Mover</p>"},{"location":"scripts/Player/#overview","title":"Overview","text":"<p>Our main character class. Contains movement mechanics, and collision</p>"},{"location":"scripts/Player/#functions","title":"Functions","text":"<p><code>public void changeMovement</code></p> <ul> <li>Defualt Value: <code>true</code></li> <li>Recieves a <code>bool</code>which disables/enables movement(true = movement)</li> </ul>"},{"location":"scripts/bookFallFinish/","title":"BookFallFinish","text":"<p>Extends <code>MonoBehavior</code></p>"},{"location":"scripts/bookFallFinish/#overview","title":"Overview","text":"<p>Attached to bookshelf sprite in the inside scene.</p> <p>Triggers the book ui object when the bookshelf animation is over.</p>"},{"location":"scripts/bookFallFinish/#functions","title":"Functions","text":"<p><code>public void hideDiary</code></p> <ul> <li>Hides the Diary UI GameObject</li> </ul>"},{"location":"unity/","title":"Unity","text":"<p>This sections includes helpful information about how to implement/create almost everything that we've[I've] ever used in Unity. Some of them might be copy and pasted from the onboarding, some might be links to helpful tutorials.</p>"},{"location":"unity/animations/","title":"Animations","text":"<p>Look it up, there are some really good tutorials.</p>"},{"location":"unity/creating-scenes/","title":"Creating Scenes","text":"<p>There are two ways we go about this. </p> <ol> <li> <p>Copy and paste an existing scene and edit it(I suggest this).</p> </li> <li> <p>Create a scene from scratch(see below).</p> </li> </ol>"},{"location":"unity/creating-scenes/#creating-a-scene-from-scratch","title":"Creating a Scene from Scratch","text":"<ol> <li> <p>Click on the \"Tile Map\" tab next to \"Console.\" This is where you store artwork to be used in the background/tile map.</p> </li> <li> <p>Click the drop down that says \"Create New Palette.\" Name it onboarding, store it in the assets folder for now. These will be stored in the prefab folder(which doesn't exist in this branch). We have one for every scene.</p> </li> <li> <p>Start dragging art from the artwork folder into the empty tilemap. Each file you drag will ask you to make a tile. These are what unity uses to create the background.</p> </li> <li> <p>When you have enough tiles, use the paint with active brush tool (B) to add them to the scene. Click on the \"scene\" tab next to \"game\" at the top of the bottom left window. Drag your mouse over the art element you want to add in the tile map. Then click to add it to the scene. Make sure you have the \"background game object selected. To see what the scene looks like. Switch back to the \"game\" tab or click on the \"Main Camera\" Object.</p> </li> </ol> <p>This step is super finicky. It just takes some practice to get used to.</p>"},{"location":"unity/creating-sprites/","title":"Creating Sprites","text":"<p>There are two ways we go about this. </p> <ol> <li> <p>Copy and paste an existing sprite and edit it(I suggest this especially for the player).</p> </li> <li> <p>Create a scene from scratch(see below).</p> </li> </ol>"},{"location":"unity/creating-sprites/#sprite-from-scratch","title":"Sprite from Scratch","text":"<ol> <li> <p>To create a sprite. Go to the \"Game Object,\" click \"Create Empty.\" Name it whatever, make sure it's between Main Camera and Grid in the heirarchy window. Then in the Inpsector click \"add component.\" Look up \"Sprite Renderer.\" Under the \"sprite\" option, click the circle with a dot in it and select an artwork to be the sprite.</p> </li> <li> <p>Add all the necessary scripts, colliders, rigidbodies, etc.</p> </li> </ol>"},{"location":"unity/game-objects/","title":"Game Objects","text":""},{"location":"unity/importing-art/","title":"Importing Art","text":"<p>See the design team onboarding here.</p>"}]}